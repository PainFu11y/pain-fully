package org.platform.springJpa;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.platform.entity.event.Event;
import org.platform.entity.event.EventMember;
import org.platform.entity.Member;
import org.platform.enums.ParticipantStatus;
import org.platform.model.event.EventDto;
import org.platform.model.event.EventParticipationDto;
import org.platform.model.event.EventMemberDto;
import org.platform.repository.EventMemberRepository;
import org.platform.repository.EventRepository;
import org.platform.repository.MemberRepository;
import org.platform.service.EventMemberService;
import org.platform.springJpa.email.EmailSpringJpa;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.TextStyle;
import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class EventMemberJpa implements EventMemberService {
    private final EventRepository eventRepository;
    private final EventMemberRepository eventMemberRepository;
    private final EmailSpringJpa emailSpringJpa;
    private final MemberRepository memberRepository;


    @Override
    public ResponseEntity<String> createEvent(UUID eventId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        boolean hasMemberRole = authentication.getAuthorities().stream()
                .anyMatch(auth -> auth.getAuthority().equals("ROLE_MEMBER"));
        String memberEmail = authentication.getName();

        if (!hasMemberRole) {
            log.warn("User {} tried to change verification status without MEMBER role", authentication.getName());
            throw new RuntimeException("Forbidden: You do not have MEMBER permissions");
        }

        Member currentMember = memberRepository.findByEmail(memberEmail)
                .orElseThrow(() -> {
                    log.warn("Member with id {} not found", eventId);
                    return new RuntimeException("Member with id " + eventId + " not found");
                });

        Event event = eventRepository.findById(eventId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ EventMember —Å–≤—è–∑–∫–∞
        List<EventMember> existingAssociations = eventMemberRepository.findByEvent(event);
        for (EventMember em : existingAssociations) {
            if (em.getMemberList().stream().anyMatch(m -> m.getId().equals(currentMember.getId()))) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {}", currentMember.getId(), eventId);
                return ResponseEntity.status(HttpStatus.CONFLICT).body("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏");
            }
        }

        EventMember eventMember = new EventMember();
        eventMember.setId(UUID.randomUUID());
        eventMember.setEvent(event);
        eventMember.setMemberList(Collections.singletonList(currentMember));

        eventMemberRepository.save(eventMember);
        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é {}", currentMember.getId(), eventId);


        Locale russian = new Locale("ru");

        String dayOfWeek = event.getStartTime()
                .getDayOfWeek()
                .getDisplayName(TextStyle.FULL, russian); // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

        String day = String.valueOf(event.getStartTime().getDayOfMonth()); // 20
        String month = event.getStartTime().getMonth()
                .getDisplayName(TextStyle.FULL, russian); // –∞–ø—Ä–µ–ª—è
        String year = String.valueOf(event.getStartTime().getYear()); // 2025

        String time = event.getStartTime().format(DateTimeFormatter.ofPattern("HH:mm")); // 15:00

        String formattedDate = String.format("–≤ %s, %s %s %s –≥–æ–¥–∞ –≤ %s", dayOfWeek, day, month, year, time);


        String htmlContent = String.format("""
        <html>
            <body style="font-family: Arial, sans-serif; color: #333;">
                <div style="max-width: 600px; margin: auto; padding: 20px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                    <h2 style="color: #2F4F4F;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s! üéâ</h2>
                    <p>–í—ã —É—Å–ø–µ—à–Ω–æ <strong>–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å</strong> –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é <strong>¬´%s¬ª</strong>!</p>

                    <p>–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                    <ul>
                        <li>–°–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏</li>
                        <li>–û–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</li>
                        <li>–ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ—Ç–ª–∏—á–Ω–æ–º—É –æ–ø—ã—Ç—É!</li>
                    </ul>

                    <hr style="margin: 20px 0;">

                    <p><strong>üìÖ –î–∞—Ç–∞:</strong> %s</p>
                    <p><strong>üìç –ú–µ—Å—Ç–æ:</strong> %s</p>
                    <p><strong>üîó –û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:</strong> %s</p>

                    <hr style="margin: 20px 0;">

                    <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.</p>

                    <p style="margin-top: 30px;">–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!</p>
                    <p style="font-style: italic;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Painfully</p>
                </div>
            </body>
        </html>
        """,
                currentMember.getUsername(),
                event.getTitle(),
                formattedDate,
                event.getLocation(),
                event.getDescription()
        );

        emailSpringJpa.sendEventJoinMessage(currentMember.getEmail(),
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é! üéâ",
                htmlContent);

        return ResponseEntity.ok("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é");
    }

    @Override
    public List<EventParticipationDto> getMyEvents() {
        Member currentMember = getCurrentAuthenticatedMember();

        LocalDateTime now = LocalDateTime.now();

        return eventMemberRepository.findByMember(currentMember).stream()
                .map(em -> {
                    Event event = em.getEvent();
                    String status = event.getStartTime().isAfter(now)
                            ? ParticipantStatus.WILL_PARTICIPATE.toString()
                            : ParticipantStatus.PARTICIPATED.toString();
                    EventDto eventDto = event.toDto();
                    eventDto.getOrganizerDto().setPassword(null);
                    return new EventParticipationDto(event.toDto(), status);
                })
                .toList();
    }


    @Override
    public EventMemberDto updateEventMember(UUID id, EventMemberDto eventMemberDto) {
        return null;
    }

    @Override
    public EventMemberDto getEventMember(UUID id) {
        return null;
    }

    @Override
    public List<EventMemberDto> getAllEventMembers() {
        return List.of();
    }

    @Override
    public void deleteEventMember(UUID id) {

    }


    private Member getCurrentAuthenticatedMember() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated()) {
            throw new RuntimeException("Unauthorized");
        }

        String currentEmail = authentication.getName();
        Optional<Member> optionalMember = memberRepository.findByEmail(currentEmail);

        if (optionalMember.isPresent()) {
            return optionalMember.get();
        }

        throw new RuntimeException("Authenticated member not found");
    }


}
